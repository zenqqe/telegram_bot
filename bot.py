import logging, random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from typing import Dict

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levellevel)s - %(message)s',
    level=logging.INFO
)

# –î–∞–Ω–Ω—ã–µ: —Ñ–∞–∫—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
facts = [
    {
        "text": "–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ ‚Äî –≤–æ–π–Ω–∞ –º–µ–∂–¥—É –°–æ–≤–µ—Ç—Å–∫–∏–º –°–æ—é–∑–æ–º –∏ –Ω–∞—Ü–∏—Å—Ç—Å–∫–æ–π –ì–µ—Ä–º–∞–Ω–∏–µ–π, –∞ —Ç–∞–∫–∂–µ –∏—Ö —Å–æ—é–∑–Ω–∏–∫–∞–º–∏ –≤ 1941‚Äî1945 –≥–æ–¥–∞—Ö.",
        "photo": "https://www.sechenov.ru/upload/medialibrary/66b/KHroniki-velikikh-strazheniy.jpeg",
        "caption": "–°–æ–≤–µ—Ç—Å–∫–∏–µ —Å–æ–ª–¥–∞—Ç—ã –≤ –°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –±–∏—Ç–≤–µ"
    },
    {
        "text": "–í —Ö–æ–¥–µ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã –ö—Ä–∞—Å–Ω–∞—è –∞—Ä–º–∏—è —Ä–∞–∑–≥—Ä–æ–º–∏–ª–∞ 607 –¥–∏–≤–∏–∑–∏–π –≤–µ—Ä–º–∞—Ö—Ç–∞ –∏ 100 –¥–∏–≤–∏–∑–∏–π –µ–≥–æ —Å–æ—é–∑–Ω–∏–∫–æ–≤.",
        "photo": "https://www.sechenov.ru/upload/medialibrary/66b/KHroniki-velikikh-strazheniy.jpeg",
        "caption": "–°–æ–≤–µ—Ç—Å–∫–∏–µ —Å–æ–ª–¥–∞—Ç—ã –≤ –±–æ—é"
    },
    {
        "text": "–ë–ª–æ–∫–∞–¥–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞ –¥–ª–∏–ª–∞—Å—å 872 –¥–Ω—è –∏ —É–Ω–µ—Å–ª–∞ –∂–∏–∑–Ω–∏ –±–æ–ª–µ–µ 600 000 —á–µ–ª–æ–≤–µ–∫.",
        "photo": "https://www.sechenov.ru/upload/medialibrary/66b/KHroniki-velikikh-strazheniy.jpeg",
        "caption": "–ë–ª–æ–∫–∞–¥–Ω—ã–π –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥"
    },
    {
        "text": "–°–æ–≤–µ—Ç—Å–∫–∏–µ –≤–æ–µ–Ω–Ω–æ–ø–ª–µ–Ω–Ω—ã–µ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–æ–µ–Ω–Ω—ã–µ –Ω—É–∂–¥—ã –¢—Ä–µ—Ç—å–µ–≥–æ —Ä–µ–π—Ö–∞.",
        "photo": "https://www.sechenov.ru/upload/medialibrary/66b/KHroniki-velikikh-strazheniy.jpeg",
        "caption": "–°–æ–≤–µ—Ç—Å–∫–∏–µ –≤–æ–µ–Ω–Ω–æ–ø–ª–µ–Ω–Ω—ã–µ"
    }
]

quiz_questions = [
    {
        "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞?",
        "options": ["1939", "1941", "1942", "1940"],
        "correct": "1941"
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª–∏–ª–∞—Å—å –±–ª–æ–∫–∞–¥–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞?",
        "options": ["872", "900", "600", "1000"],
        "correct": "872"
    },
    {
        "question": "–ö—Ç–æ –±—ã–ª –í–µ—Ä—Ö–æ–≤–Ω—ã–º –≥–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–∏–º –≤ –≥–æ–¥—ã –í–û–í?",
        "options": ["–ñ—É–∫–æ–≤", "–°—Ç–∞–ª–∏–Ω", "–†–æ–∫–æ—Å—Å–æ–≤—Å–∫–∏–π", "–í–æ—Ä–æ—à–∏–ª–æ–≤"],
        "correct": "–°—Ç–∞–ª–∏–Ω"
    }
]

# –•–µ–ª–ø–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
def get_unique_fact(context: ContextTypes.DEFAULT_TYPE) -> Dict:
    if 'shown_facts' not in context.user_data:
        context.user_data['shown_facts'] = []
    if len(context.user_data['shown_facts']) >= len(facts):
        context.user_data['shown_facts'] = []
    available_facts = [f for f in facts if f not in context.user_data['shown_facts']]
    fact = random.choice(available_facts)
    context.user_data['shown_facts'].append(fact)
    return fact

# –•–µ–ª–ø–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def send_quiz_question(send_func, context: ContextTypes.DEFAULT_TYPE) -> None:
    q_index = context.user_data['quiz_question']
    question = quiz_questions[q_index]
    keyboard = [[InlineKeyboardButton(opt, callback_data=f"quiz_{opt}")] for opt in question['options']]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(quiz_questions)}:\n\n{question['question']}"
    await send_func(text, reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info("Received /start command")
    keyboard = [
        [KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ –í–û–í üìö")],
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚úèÔ∏è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –ø—Ä–æ –í–µ–ª–∏–∫—É—é –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –í–æ–π–Ω—É üéñÔ∏è', reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info("Received /help command")
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/help - –ü–æ–º–æ—â—å")

# –°—Ç–∞—Ä—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–Ω–µ –ø–µ—Ä–µ–∑–∞–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
async def start_quiz(update_obj, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'quiz_question' not in context.user_data:
        context.user_data['quiz_question'] = 0
        context.user_data['correct_answers'] = 0
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π send_function: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message.reply_text –∏–ª–∏ reply_text (–¥–ª—è callback)
    if hasattr(update_obj, 'message') and update_obj.message:
        send_func = lambda text, markup: update_obj.message.reply_text(text, reply_markup=markup)
    else:
        send_func = lambda text, markup: update_obj.reply_text(text, reply_markup=markup)
    await send_quiz_question(send_func, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ –í–û–í üìö":
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ‚≠ê", reply_markup=ReplyKeyboardRemove())
        fact = get_unique_fact(context)
        # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∏–¥–µ–æ
        if len(context.user_data['shown_facts']) >= len(facts):
            await update.message.reply_text("–í—ã —É–≤–∏–¥–µ–ª–∏ –≤—Å–µ —Ñ–∞–∫—Ç—ã! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            context.user_data['shown_facts'] = []
            keyboard = [[InlineKeyboardButton("–ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤–∏–¥–µ–æ –Ω–∞ Rutube", url="https://rutube.ru/video/35a4cbd19c68ebf46a344c31102a1b5f/")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("https://google.com", reply_markup=reply_markup)
            return
        keyboard = [[InlineKeyboardButton("–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã ‚û°Ô∏è", callback_data='more_facts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(fact["text"], reply_markup=reply_markup)
        try:
            await update.message.reply_photo(photo=fact["photo"], caption=fact["caption"])
            logging.info("Photo sent successfully")
        except Exception as e:
            logging.error(f"Error sending photo: {e}")
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    elif text == "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚úèÔ∏è":
        await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –æ –í–û–í! üéØ", reply_markup=ReplyKeyboardRemove())
        await start_quiz(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start üîÑ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'more_facts':
        fact = get_unique_fact(context)
        if len(context.user_data['shown_facts']) >= len(facts):
            await query.message.reply_text("–í—ã —É–≤–∏–¥–µ–ª–∏ –≤—Å–µ —Ñ–∞–∫—Ç—ã! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            context.user_data['shown_facts'] = []
            keyboard = [
                [InlineKeyboardButton("–ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤–∏–¥–µ–æ –ø—Ä–æ –í–û–í üé•", url="https://rutube.ru/video/35a4cbd19c68ebf46a344c31102a1b5f/")],
                [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø—Ä–æ –í–û–í üìù", callback_data='start_quiz')],
                [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–∫—Ç—ã –∑–∞–Ω–æ–≤–æ üîÑ", callback_data='restart_facts')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ, –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ:", reply_markup=reply_markup)
            return
        
        keyboard = [[InlineKeyboardButton("–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã ‚û°Ô∏è", callback_data='more_facts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(fact["text"], reply_markup=reply_markup)
        try:
            await query.message.reply_photo(photo=fact["photo"], caption=fact["caption"])
        except Exception as e:
            logging.error(f"Error sending photo: {e}")
            await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    
    elif query.data == 'restart_facts':
        context.user_data['shown_facts'] = []
        fact = get_unique_fact(context)
        keyboard = [[InlineKeyboardButton("–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã ‚û°Ô∏è", callback_data='more_facts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–∫—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ!\n\n" + fact["text"], reply_markup=reply_markup)
        try:
            await query.message.reply_photo(photo=fact["photo"], caption=fact["caption"])
        except Exception as e:
            logging.error(f"Error sending photo: {e}")
            await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    
    elif query.data.startswith('quiz_'):
        answer = query.data.replace('quiz_', '')
        current_question = quiz_questions[context.user_data['quiz_question']]
        if answer == current_question['correct']:
            context.user_data['correct_answers'] += 1
            await query.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
        else:
            await query.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['correct']}")
        context.user_data['quiz_question'] += 1
        if context.user_data['quiz_question'] < len(quiz_questions):
            question = quiz_questions[context.user_data['quiz_question']]
            keyboard = [[InlineKeyboardButton(opt, callback_data=f"quiz_{opt}")] for opt in question['options']]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å {context.user_data['quiz_question'] + 1} –∏–∑ {len(quiz_questions)}:\n\n{question['question']}",
                reply_markup=reply_markup
            )
        else:
            score = context.user_data['correct_answers']
            total = len(quiz_questions)
            await query.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞ üîÑ", callback_data='restart_quiz')],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã üìö", callback_data='more_facts')],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –ø—Ä–æ –í–û–í üé•", url="https://rutube.ru/video/35a4cbd19c68ebf46a344c31102a1b5f/")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
            context.user_data['quiz_question'] = 0
            context.user_data['correct_answers'] = 0
    
    elif query.data == 'restart_quiz':
        context.user_data['quiz_question'] = 0
        context.user_data['correct_answers'] = 0
        await start_quiz(query.message, context)
    
    elif query.data == 'start_quiz':
        context.user_data['quiz_question'] = 0
        context.user_data['correct_answers'] = 0
        question = quiz_questions[context.user_data['quiz_question']]
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"quiz_{opt}")] for opt in question['options']]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å {context.user_data['quiz_question'] + 1} –∏–∑ {len(quiz_questions)}:\n\n{question['question']}",
            reply_markup=reply_markup
        )

def main():
    bot_token = '7817244946:AAG6BCMlM727ywBSj4qghz18H9r1L-o_w1k'
    application = ApplicationBuilder().token(bot_token).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logging.info("Starting bot")
    application.run_polling()

if __name__ == '__main__':
    main()